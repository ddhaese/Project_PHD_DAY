[["social-network.html", "Workshop 3 Social network 3.1 Introduction to social network 3.2 Loading the data 3.3 Exploring 3.4 Reducing size 3.5 The network 3.6 Vectors 3.7 Cascading style sheets", " Workshop 3 Social network 3.1 Introduction to social network In this workshop, we will try to create an interactive force-directed network diagram from the D3.js framework. Typically, this type of graph is adopted for displaying relations within a social network, but its use extend far beyond social sciences. For example, one could device a similar network depicting the correlation among variables of a large dataset (e.g. the results within the students dataset of workshop 1) or, from the realm of NLP, the co-occurrence of words within tweets. 3.2 Loading the data We will be using the MUSAE GitHub Social Network dataset from Kaggle. This data covers the social network of developers on github. The authors provide us with three files, two of which we will need to display the network: a set of nodes containing the name of the developers a set of edges depicting the relationships among developers Start a new project Load the two files containing the data library(data.table) library(magrittr) library(networkD3) edges &lt;- fread(&quot;dat/git_edges.tsv&quot;) nodes &lt;- fread(&quot;dat/git_nodes.tsv&quot;) 3.3 Exploring Explore the two data.table objects using the str command until you understand how these are connected to each other 3.4 Reducing size Unfortunately, visualizing a social network is really only feasible with relatively small networks. Once we start talking thousand of nodes, you will need a bigger boat. Not that the D3.js network is slow, it is not. It has to do with the number of edges increasing exponentially with increasing number of nodes. Pick the 40 most popular developers, i.e. the ones with the most connections, and adjust the edges and nodes datasets accordingly popular &lt;- edges %&gt;% unlist %&gt;% table %&gt;% sort %&gt;% rev %&gt;% head(40) %&gt;% names edges_sel &lt;- edges[Source %in% popular &amp; Target %in% popular] edges_sel[, Source := match(Source, popular) - 1] edges_sel[, Target := match(Target, popular) - 1] nodes_sel &lt;- nodes[ID %in% popular] nodes_sel[, ID := match(ID, popular) - 1] 3.5 The network Drawing the network is really easy. Because however it is different from any other plotting system in R, it takes a bit time to get accustomed to. For example, the color palette is being written in Javascript. Start by creating a palette with your two favourite colors palette(c(&quot;#2D859C&quot;, &quot;#B86619&quot;)) Now we have to make sure to generate a Javascript statement that looks like this: d3.scaleOrdinal(). domain([&quot;0&quot;, &quot;1&quot;]). range([&quot;#2D859C&quot;, &quot;#B86619&quot;]); Generate the above JS code based on the value of the palette color_scale &lt;- paste0( &quot;d3.scaleOrdinal().domain([\\&quot;0\\&quot;, \\&quot;1\\&quot;])&quot;, &quot;.range([\\&quot;&quot;, palette()[1:2] %&gt;% paste0(collapse = &quot;\\&quot;, \\&quot;&quot;), &quot;\\&quot;]);&quot;) Indeed, also the content of the domain function call could be generated from the unique values in the node groups instead of fixing it to contain [\"0\", \"1\"]. Notice the use of escapes for inserting double quotes. Now that we have the colors covered, we can call the forceNetwork function of the networkD3 package. forceNetwork( height = 600, width = 600, Links = edges_sel, Nodes = nodes_sel, Source = &quot;Source&quot;, Target = &quot;Target&quot;, NodeID = &quot;Name&quot;, Group = &quot;Group&quot;, bounded = TRUE, opacityNoHover = .8, linkColour = &quot;#B3B3B3&quot;, zoom = TRUE, colourScale = JS(color_scale), legend = TRUE, fontFamily = &quot;Roboto&quot;, fontSize = 16, charge = -1, opacity = 1, linkDistance = 200) Let us go over the arguments one-by-one: height = 600: set canvas width to 600 pixels width = 600: set canvas height to 600 pixels Links = edges_sel: attach edge dataset Nodes = nodes_sel: attach node dataset Source = \"Source\": define the variable name containing the source of the relationships Target = \"Target\": define the variable name containing the target of the relationships NodeID = \"Name\": define the variable name containing the label to be displayed Group = \"Group\": define the variable name containing the (color) group bounded = TRUE: wether nodes are allowed to fly out of the canvas opacityNoHover = .8: the opacity of the labels when no node is being hovered over linkColour = \"#B3B3B3\": the color of the edges zoom = TRUE: whether the network can be zoomed-in and out colourScale = JS(color_scale): the JS color scale legend = TRUE: whether to add a legend fontFamily = \"Roboto\": the font family for the labels fontSize = 16: the font size for the labels charge = -1: the amount of force that pull the nodes together (positive) or apart (negative) opacity = 1: the relative opacity of the graph elements linkDistance = 200: the default length of the edges disregarding forces acting upon the nodes See ?forceNetwork for more details. Mind that the code for the developer type was not clear from the data source, otherwise we could have replaced 0 and 1 by their proper type descriptions and the legend would adjust accordingly. 3.6 Vectors The network is being rendered as an svg HTML element (scalable vector graphics). This has some very interested advantages. For one, it means the texts are not rendered as images, but remain searchable just like any other text on the report. Try to search text within your network (e.g. mcanthony) or that of this workshop page using your browser 3.7 Cascading style sheets Hopefully you have heard of CSS before. It is the language used to style the web and it has been growing more popular in the past decades and will probably continue to do so for a while. Because the network is being rendered as pure HTML, elements of it can also be styled using CSS. In Rstudio, which supports multilingual development, you can add a css code chunk instead of an R code chunk. Add a css code chunk in your report to adjust the border color and border stroke width of the nodes. Also, when finished growing after hovering over it, turn the node to a brighter orange: g circle { stroke: #B3B3B3 !important; stroke-width: 1px !important; } g circle[r=&quot;11&quot;]{ fill: #FD9734; } g circle { stroke: #B3B3B3 !important; stroke-width: 1px !important; } g circle[r=\"11\"]{ fill: #FD9734; } "]]
